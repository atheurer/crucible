---
name: crucible-release
on:    # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      dry_run:
        required: false
        type: boolean
        description: Do NOT create/delete/update branch to/from the repositories
        default: false
      custom_release:
        required: false
        type: string
        description: Custom release (branch) to create/delete/update
        default: ''
      action:
        required: true
        type: choice
        options:
          - create
          - delete
          - update
        description: Action to perform with the custom_release (create or delete or update)
        default: 'create'
      force_create:
        required: false
        type: boolean
        description: FORCE create (override branch)
        default: false
  workflow_call:
    inputs:
      dry_run:
        required: false
        type: boolean
        description: Do NOT create/delete/update branch to/from the repositories
      custom_release:
        required: false
        type: string
        description: Custom release (branch) to create/delete/update
        default: ''
      action:
        required: true
        type: string
        description: Action to perform (create or delete or update)
      force_create:
        required: false
        type: boolean
        description: FORCE create (override branch)
    secrets:
      PRIVATE_KEY__TAG_CRUCIBLE_RELEASE:
        required: true

concurrency:
  group: crucible-release
  cancel-in-progress: false

jobs:
  release-branch:
    runs-on: [ self-hosted, workflow-overhead ]
    timeout-minutes: 10
    outputs:
      branch: ${{ steps.gen-release-branch.outputs.release }}
      repos: ${{ steps.get-repos.outputs.repos }}
    steps:
      - name: Generate release branch
        id: gen-release-branch
        run: |
            if [ "${{ inputs.custom_release }}" == "" ]; then
                year="$(date -u +%Y)"
                month="$(date -u +%m)"
                month=${month#0}
                quarter="$(((month-1)/3+1))"
                echo "release=$year.$quarter" >> $GITHUB_OUTPUT
            else
                echo "release=${{ inputs.custom_release }}" >> $GITHUB_OUTPUT
            fi
      - name: Display params
        id: get-params
        env:
          BRANCH: ${{ steps.gen-release-branch.outputs.release }}
          DRY_RUN: ${{ inputs.dry_run }}
          CUSTOM_RELEASE: ${{ inputs.custom_release }}
          ACTION: ${{ inputs.action }}
          GITHUB_EVENT: ${{ github.event_name }}
          FORCE_CREATE: ${{ inputs.force_create }}
        run: |
          echo "branch=$BRANCH"
          echo "dry_run=$DRY_RUN"
          echo "custom_release=$CUSTOM_RELEASE"
          echo "action=$ACTION"
          echo "github_event=$GITHUB_EVENT"
          echo "force_create=$FORCE_CREATE"
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID__TAG_CRUCIBLE_RELEASE }}
          private-key: ${{ secrets.PRIVATE_KEY__TAG_CRUCIBLE_RELEASE }}
          owner: ${{ github.repository_owner }}  
      - name: checkout crucible default
        uses: actions/checkout@v4
        with:
          repository: perftool-incubator/crucible
          ref: ${{ github.ref }}
          path: crucible
          fetch-depth: 0
          set-safe-directory: false
          token: ${{ steps.generate-token.outputs.token }}
      - name: create/delete/update branch to/from the crucible repo
        if: ${{ inputs.dry_run == false }}
        env:
          BRANCH: ${{ steps.gen-release-branch.outputs.release }}
        run: |
            cd $GITHUB_WORKSPACE
            cd crucible
            echo "Branches:"
            git ls-remote --heads origin
            echo "Local Branches:"
            git branch
            echo "Current commit's object name:"
            git rev-parse --verify HEAD
            echo "Current object name for branch $BRANCH (if it exists):"
            git rev-parse --verify remotes/origin/$BRANCH || true
            if [ "${{ inputs.action }}" == "create" ]; then
                ARGS=""
                if [ "${{ inputs.force_create }}" == "true" ]; then
                    ARGS="--force"
                fi
                git checkout -B $BRANCH
                git push origin heads/$BRANCH $ARGS
            elif [ "${{ inputs.action }}" == "delete" ]; then
                if [ "${{ inputs.force_create }}" == "true" ]; then
                    git push --delete origin heads/$BRANCH || true
                else
                    git push --delete origin heads/$BRANCH
                fi
            elif [ "${{ inputs.action }}" == "update" ]; then
                ARGS=""
                if [ "${{ inputs.force_create }}" == "true" ]; then
                    ARGS="--force"
                fi
                remote_branch=$(git ls-remote --heads origin ${BRANCH})
                if [ -z "${remote_branch}" ]; then
                    echo "The branch does not exist, creating it"
                    git checkout -B ${BRANCH}
                    git push origin heads/${BRANCH} ${ARGS}
                else
                    primary_branch=$(git branch --show-current)
                    echo "The branch does exist, rebasing from '${primary_branch}'"
                    git checkout -B ${BRANCH} origin/${BRANCH}
                    git rebase ${primary_branch}
                    git push origin heads/${BRANCH} ${ARGS}
                fi
            fi
            echo "Current object name for branch $branch (if it exists):"
            git rev-parse --verify remotes/origin/$BRANCH || true
      - name: Get the list of sub-projects
        id: get-repos
        run: |
            cd $GITHUB_WORKSPACE
            cd crucible/config
            # get 3rd column (repo URL) without the starting '/' (remove first char),
            # so repo urls /a /b /c are extracted to a b c
            # and add to a bash array ( a b c )
            projects=( $(jq -r '.official[] | select(.name != "crucible") | .repository | sub(".*\/"; "")' repos.json) )
            # builtin implict join array "a","b","c" (double quotes for a valid json)
            printf -v list '"%s",' "${projects[@]}"
            # convert to a comma separated list ["a","b","c"]
            echo "repos=[${list%,}]" >> $GITHUB_OUTPUT
      - name: Display sub-projects repos list
        id: display-repos
        env:
          REPOS: ${{ steps.get-repos.outputs.repos }}
        run: echo "$REPOS"

  projects-branch:
    runs-on: [ self-hosted, workflow-overhead ]
    timeout-minutes: 10
    needs:
      - release-branch
    strategy:
      matrix:
        repository: ${{ fromJSON(needs.release-branch.outputs.repos) }}
    steps:
      - name: Display sub-project repository name
        run: |
            echo "repository=${{ matrix.repository }}"
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID__TAG_CRUCIBLE_RELEASE }}
          private-key: ${{ secrets.PRIVATE_KEY__TAG_CRUCIBLE_RELEASE }}
          owner: ${{ github.repository_owner }}  
      - name: checkout sub-project repository
        uses: actions/checkout@v4
        with:
          repository: perftool-incubator/${{ matrix.repository }}
          path: ${{ matrix.repository }}
          fetch-depth: 0
          set-safe-directory: false
          token: ${{ steps.generate-token.outputs.token }}
      - name: create/delete/update release branch
        if: ${{ inputs.dry_run == false }}
        env:
          BRANCH: ${{ needs.release-branch.outputs.branch }}
        run: |
            cd $GITHUB_WORKSPACE
            cd ${{ matrix.repository }}
            echo "Branches:"
            git ls-remote --heads origin
            echo "Local Branches:"
            git branch
            echo "Current commit's object name:"
            git rev-parse --verify HEAD
            echo "Current object name for branch $BRANCH (if it exists):"
            git rev-parse --verify remotes/origin/$BRANCH || true
            if [ "${{ inputs.action }}" == "create" ]; then
                ARGS=""
                if [ "${{ inputs.force_create }}" == "true" ]; then
                    ARGS="--force"
                fi
                git checkout -B $BRANCH
                git push origin heads/$BRANCH $ARGS
            elif [ "${{ inputs.action }}" == "delete" ]; then
                if [ "${{ inputs.force_create }}" == "true" ]; then
                    git push --delete origin heads/$BRANCH || true #branch
                else
                    git push --delete origin heads/$BRANCH #branch
                fi
            elif [ "${{ inputs.action }}" == "update" ]; then
                ARGS=""
                if [ "${{ inputs.force_create }}" == "true" ]; then
                    ARGS="--force"
                fi
                remote_branch=$(git ls-remote --heads origin ${BRANCH})
                if [ -z "${remote_branch}" ]; then
                    echo "The branch does not exist, creating it"
                    git checkout -B ${BRANCH}
                    git push origin heads/${BRANCH} ${ARGS}
                else
                    primary_branch=$(git branch --show-current)
                    echo "The branch does exist, rebasing from '${primary_branch}'"
                    git checkout -B ${BRANCH} origin/${BRANCH}
                    git rebase ${primary_branch}
                    git push origin heads/${BRANCH} ${ARGS}
                fi
            fi
            echo "Current object name for branch $BRANCH (if it exists):"
            git rev-parse --verify remotes/origin/$BRANCH || true

  crucible-release-verification:
    if: ${{ inputs.action == 'create' || inputs.action == 'update' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - release-branch
      - projects-branch
    steps:
      - name: checkout crucible
        uses: actions/checkout@v4
        with:
          repository: perftool-incubator/crucible
          ref: ${{ github.ref }}
          path: crucible
      - name: prepare installation resources
        run: |
          touch /tmp/auth-file.json
          cfgfile=$(grep SYSCONFIG= crucible/crucible-install.sh | cut -d '=' -f2 | sed 's/"//g')
          sudo mkdir -p $(dirname $cfgfile)
      - name: test release install
        env:
          BRANCH: ${{ needs.release-branch.outputs.branch }}
        run: |
          sudo ./crucible/crucible-install.sh \
            --release $BRANCH \
            --engine-registry myregistry.io/crucible \
            --engine-auth-file /tmp/auth-file.json \
            --name "Nobody" \
            --email "nobody@somewhere.com" \
            --verbose

  crucible-release-complete:
    runs-on: [ self-hosted, workflow-overhead ]
    timeout-minutes: 10
    needs:
      - crucible-release-verification
    steps:
      - name: 
        run: |
            echo "crucible-release-complete"
