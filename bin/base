#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

EC_FAIL_USER=2

# make sure the user has a .crucible directory for storing things
USER_STORE=$HOME/.crucible
if [ ! -d ${USER_STORE} ]; then
    mkdir -v ${USER_STORE}
fi
LOG_DB=${USER_STORE}/log.db

if [ -z "${HOSTFS_DIR}" ]; then
    export CRUCIBLE_HOSTFS_PWD=$(pwd)
fi

if [ -z "${SESSION_ID}" -o "${CRUCIBLE_NEW_SESSION_ID}" == "yes" ]; then
    export SESSION_ID=$(uuidgen)
    CRUCIBLE_NEW_SESSION_ID="no"
fi

container_common_args=()
container_common_args+=("--rm")
container_common_args+=("-e CRUCIBLE_HOME=$CRUCIBLE_HOME")
container_common_args+=("-e TOOLBOX_HOME=${TOOLBOX_HOME}")
container_common_args+=("-e CRUCIBLE_HOSTFS_PWD=${CRUCIBLE_HOSTFS_PWD}")
container_common_args+=("--mount=type=bind,source=/root,destination=/root")
container_common_args+=("--mount=type=bind,source=${CRUCIBLE_HOME}/config/.bashrc,destination=/root/.bashrc")
container_common_args+=("--mount=type=bind,source=/home,destination=/home")
container_common_args+=("--mount=type=bind,source=/var/lib/crucible,destination=/var/lib/crucible")
container_common_args+=("--mount=type=bind,source=${CRUCIBLE_HOME},destination=${CRUCIBLE_HOME}")
container_common_args+=("--mount=type=bind,source=/,destination=/hostfs")
container_common_args+=("--privileged")
container_common_args+=("--ipc=host")
container_common_args+=("--pid=host")
container_common_args+=("--net=host")
container_common_args+=("--security-opt=label=disable")
container_common_args+=("--workdir=`/bin/pwd`")

container_log_args=()
container_log_args+=("--mount=type=bind,source=${USER_STORE},destination=${USER_STORE}")
container_log_args+=("--mount=type=bind,source=/tmp,destination=/tmp")

var_crucible="/var/lib/crucible"
var_run_crucible="${var_crucible}/run"
var_archive_crucible="${var_crucible}/archive"

function podman_wrapper() {
    local RC

    podman "$@" 2>&1 | grep --line-buffered -v "level=warning"
    RC=${PIPESTATUS[0]}

    return ${RC}
}

podman_pull="podman_wrapper pull"
podman_stop="podman_wrapper stop"
podman_rm="podman_wrapper rm"
podman_run="podman_wrapper run --pull=missing"
podman_run_interactive="podman run --pull=missing"
podman_exists="podman_wrapper container exists"
podman_ps="podman_wrapper ps"

function podman_running() {
    pod=${1}
    if [ -z "${pod}" ]; then
        exit_error "podman_running: no pod name supplied" 3
    fi

    if ${podman_exists} ${pod}; then
        check_output=$(${podman_ps} --filter status=running --filter name=${pod} | grep -v CREATED)

        if [ -n "${check_output}" ]; then
            echo "...appears to be running"
            return 0
        else
            echo "...appears to be present but not running...fixing:"
            ${podman_stop} ${pod}
            ${podman_rm} ${pod}
            return 1
        fi
    else
        echo "...not present, starting a container for it:"
        return 1
    fi
}

function get_timestamp() {
    date -u +%Y-%m-%d_%H:%M:%S_%Z
}

datetime=$(get_timestamp)

function exit_error() {
    echo "ERROR: ${1}"
    shift
    if [ ! -z "$1" ]; then
        exit $1
    else
        exit 1
    fi
}

function check_id {
    if [ -e $HOME/.crucible/identity ]; then
        . $HOME/.crucible/identity
    fi
    export CRUCIBLE_NAME
    export CRUCIBLE_EMAIL
    if [ -z "$CRUCIBLE_NAME" ]; then
        echo "Please consider adding \"CRUCIBLE_NAME=<your full name>\" to $HOME/.crucible/identity"
        sleep 1
    fi
    if [ -z "$CRUCIBLE_EMAIL" ]; then
        echo "Please consider adding \"CRUCIBLE_EMAIL=<your email address>\" to $HOME/.crucible/identity"
        sleep 1
    fi
}

function crucible_log() {
    if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
        ${podman_run} --name crucible-log-${SESSION_ID} ${container_log_args[@]} ${container_common_args[@]} $CRUCIBLE_CONTAINER_IMAGE $CRUCIBLE_HOME/bin/log $@
    else
        $CRUCIBLE_HOME/bin/log $@
    fi
}

function root_or_die {
    if [ "`id -u`" != "0" ]; then
        exit_error "You must run this as root, exiting" $EC_FAIL_USER
    fi
}

function send_notification {
    local message="$@"
    local RC

    if [ ! -e ${USER_STORE}/ntfy.yml ]; then
        # notifications via ntfy are not configured
        return 0
    fi

    ${podman_run} --name crucible-send-notification-${SESSION_ID} ${container_common_args[@]} $CRUCIBLE_CONTAINER_IMAGE \
                  ntfy \
                  -c ${USER_STORE}/ntfy.yml \
                  -t "Crucible Notification from $(hostname) at $(get_timestamp)" \
                  send "${message}"
    RC=$?

    if [ ${RC} != 0 ]; then
        echo "ERROR: Failed to send notification"
    fi

    return ${RC}
}
