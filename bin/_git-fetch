#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# fetch git updates for all remotes

. /etc/sysconfig/crucible

if [ -z "${CRUCIBLE_HOME}" ]; then
    echo "CRUCIBLE_HOME not defined, exiting."
    exit 1
fi

if [ ! -e ${CRUCIBLE_HOME} ]; then
    echo "Could not find ${CRUCIBLE_HOME}, exiting."
    exit 1
fi

source ${CRUCIBLE_HOME}/bin/base
source ${CRUCIBLE_HOME}/bin/jqlib

REPO_FILE=${CRUCIBLE_HOME}/config/repos.json

PROCESS_LOCK_FILE="${UPDATE_STATUS_FILE}.process-lock"
touch "${PROCESS_LOCK_FILE}"

{
    flock --nonblock --exclusive 9 || exit 0
    chmod 666 "${PROCESS_LOCK_FILE}"

    if [ -e "${UPDATE_STATUS_FILE}" ]; then
        {
            flock --timeout 2 --shared 9 || exit_error "Failed to shared acquire ${UPDATE_STATUS_LOCK_FILE} in _git-fetch"

            read FETCH_TIMESTAMP OTHER < "${UPDATE_STATUS_FILE}"
        } 9<"${UPDATE_STATUS_LOCK_FILE}"

        CURRENT_TIMESTAMP=$(date +%s)

        # re-run every 24 hours
        INVALID_TIMESTAMP=$(( FETCH_TIMESTAMP + 24*60*60 ))

        if [ ${INVALID_TIMESTAMP} -gt ${CURRENT_TIMESTAMP} ]; then
            exit 0
        fi
    fi

    {
        UPDATE_COUNT=0

        for project in $(jq_query ${REPO_FILE} '.official[], .unofficial[] | .name'); do
            echo "Processing project: ${project}"

            PROJECT_NAME=$(jq_query ${REPO_FILE} --arg project ${project} '.official[], .unofficial[] | select(.name == $project) | .name')
            PROJECT_TYPE=$(jq_query ${REPO_FILE} --arg project ${project} '.official[], .unofficial[] | select(.name == $project) | .type')
            PROJECT_CHECKOUT_MODE=$(jq_query ${REPO_FILE} --arg project ${project} '.official[], .unofficial[] | select(.name == $project) | .checkout.mode')

            if [ "${PROJECT_CHECKOUT_MODE}" == "follow" ]; then
                if [ "${PROJECT_NAME}" == "crucible" ]; then
                    repo_dir=${CRUCIBLE_HOME}
                else
                    repo_dir=${CRUCIBLE_HOME}/subprojects/$(get_project_type_dir ${PROJECT_TYPE})/${PROJECT_NAME}
                fi

                if pushd ${repo_dir} > /dev/null; then
                    if [ -d "./.git" ]; then
                        git_fetch_cmd="git fetch --all --prune --prune-tags --tags --verbose"
                        echo "${git_fetch_cmd}"
                        ${git_fetch_cmd}

                        git_status=$(git_get_status)
                        git_tracking=$(git_get_tracking "${git_status}")

                        if [ -n "${git_tracking}" -a "${git_tracking}" != "(detached)" ]; then
                            git_delta_behind=$(git_get_delta_behind "${git_status}")
                            echo "Found ${git_delta_behind} update(s)"
                            if [ "${git_delta_behind}" != "0" ]; then
                                (( UPDATE_COUNT += git_delta_behind ))
                            fi
                        fi
                    else
                        echo "ERROR: '${repo_dir}' is not a Git repo"
                    fi
                    popd > /dev/null
                else
                    echo "ERROR: Faild to pushd to '${repo_dir}'"
                fi
            else
                echo "Skipping analysis since checkout.mode is 'locked'"
            fi
        done

        CURRENT_TIMESTAMP=$(date +%s)
        {
            flock --timeout 10 --exclusive 9 || exit_error "Failed to exclusively acquire ${UPDATE_STATUS_LOCK_FILE}"

            echo "${CURRENT_TIMESTAMP} ${UPDATE_COUNT}" > "${UPDATE_STATUS_FILE}"
        } 9<"${UPDATE_STATUS_LOCK_FILE}"
    } > "${UPDATE_STATUS_FILE}.log" 2>&1

} 9<"${PROCESS_LOCK_FILE}"
