#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# run file name when copied into base_run_dir
run_file_json="run-file.json"

LOG_DB="${1}"
shift

if [ -z "${CRUCIBLE_HOME}" -o ! -e "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: Could not find \${CRUCIBLE_HOME} [${CRUCIBLE_HOME}], exiting."
    exit 1
fi

if [ -z "${LOG_DB}" -o ! -e "${LOG_DB}" -a "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    echo "ERROR: Could not find \${LOG_DB} [${LOG_DB}], exiting."
    exit 2
fi

. /etc/sysconfig/crucible
. $CRUCIBLE_HOME/bin/base

EXIT_VAL=0

if [ "${1}" == "log" ]; then
    shift
    crucible_log ${1} ${LOG_DB}
    EXIT_VAL=$?
elif [ "${1}" == "ls" -o "${1}" == "tags" -o "${1}" == "result-completion" ]; then
    result_process_cmd="${CRUCIBLE_HOME}/bin/result-processor.py"
    case "${1}" in
        ls|tags)
            ${podman_run} --name crucible-result-processor-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} ${result_process_cmd} "$@"
            EXIT_VAL=$?
            ;;
        result-completion)
            shift
            ${podman_run} --name crucible-result-processor-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} ${result_process_cmd} completion "$@"
            EXIT_VAL=$?
            ;;
    esac
elif [ "${1}" == "instances" ]; then
    shift
    if [ -z "${1}" ]; then
        ${podman_run} --name crucible-manage-instances-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} ${CRUCIBLE_HOME}/bin/manage_instances.py --cfg ${INSTANCES_CFG} info
        EXIT_VAL=$?
    else
        ${podman_run} --name crucible-manage-instances-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} ${CRUCIBLE_HOME}/bin/manage_instances.py --cfg ${INSTANCES_CFG} "$@"
        EXIT_VAL=$?
    fi
elif [ "${1}" == "registries" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/registries info
        EXIT_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/registries "$@"
        EXIT_VAL=$?
    fi
elif [ "${1}" == "repo" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/repo info
        EXIT_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/repo "$@"
        EXIT_VAL=$?
    fi
elif [ "${1}" == "update" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/update all
        EXIT_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/update ${1}
        EXIT_VAL=$?
    fi
elif [ "${1}" == "start" -o "${1}" == "stop" ]; then
    service_control "$@"
    EXIT_VAL=$?
elif [ "${1}" == "get" ]; then
    shift
    if start_httpd; then
        if ! start_opensearch; then
            EXIT_VAL=$?
        fi
    else
        EXIT_VAL=$?
    fi
    if [ $EXIT_VAL == 0 ]; then
        if [ "${1}" == "result" ]; then
            shift
            get_result "$@"
            EXIT_VAL=$?
        elif [ "${1}" == "metric" ]; then
            shift
            cdm_query_opt=$(${CRUCIBLE_HOME}/bin/manage_instances.py --cfg ${INSTANCES_CFG} query-opt)
            cdm_query_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/get-metric-data.sh $@ $cdm_query_opt"
            ${podman_run} --name crucible-get-metric-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} ${cdm_query_cmd}
            EXIT_VAL=$?
        else
            echo "ERROR: unsupported 'get' argument [${1}]"
            EXIT_VAL=1
        fi
    fi
elif [ "${1}" == "rm" ]; then
    shift
    instance=""
    # This is an optional positional argument for 'crucible rm', which overrides the
    # default opensearch instance when deleting a run (default is whatever instance
    # is used for indexing).
    if ! [[ "${1}" =~ ^-- ]]; then
        instance=${1}
        shift
    fi

    # Get the options needed to delete the documents (the host and optional password
    # information for the default opensearch instance for indexing)
    cdmver_opt=""
    access_opt=""

    if [ "$instance" = "" ]; then
        # Use the default instance
        instance=$(${podman_run}\
            --name crucible-manage-instances--${SESSION_ID}\
            ${container_common_args[@]}\
            ${CRUCIBLE_CONTROLLER_IMAGE}\
            ${CRUCIBLE_HOME}/bin/manage_instances.py\
            --cfg ${INSTANCES_CFG}\
            index-instance)
    fi

    cdmver_opt=$(${podman_run}\
        --name crucible-manage-instances--${SESSION_ID}\
        ${container_common_args[@]}\
        ${CRUCIBLE_CONTROLLER_IMAGE}\
        ${CRUCIBLE_HOME}/bin/manage_instances.py\
        --cfg ${INSTANCES_CFG}\
        instance-cdmver-opt --name ${instance})
    if [ "$cdmver_opt" == "" ]; then
        echo "ERROR: CDM version informaiton for Opensearch instance ${instance} was empty.  Did you use a valid instance?"
        exit 1
    fi

    access_opt=$(${podman_run}\
        --name crucible-manage-instances--${SESSION_ID}\
        ${container_common_args[@]}\
        ${CRUCIBLE_CONTROLLER_IMAGE}\
        ${CRUCIBLE_HOME}/bin/manage_instances.py\
        --cfg ${INSTANCES_CFG}\
        instance-host-access-opt --name ${instance})
    if [ "$access_opt" == "" ]; then
        echo "ERROR: access informaiton for Opensearch instance ${instance} was empty.  Did you use a valid instance?"
        exit 1
    fi

    if start_opensearch; then
        # Delete the run
        ${podman_run}\
            --name crucible-manage-instances--${SESSION_ID}\
            ${container_common_args[@]}\
            ${CRUCIBLE_CONTROLLER_IMAGE}\
            ${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/delete-run.sh\
            ${access_opt} ${cdmver_opt} "$@"
        RC=$?
    fi
    EXIT_VAL=$?

elif [ "${1}" == "index" ]; then
    shift
    instance=""
    base_run_dir=""
    # There is an optional positional argument for which overrides the
    # default opensearch instance.  This argument must come immediately
    # after "crucible index" and before any arguments passed to rickshaw
    # or CDM.  We need to figure out if the optional
    # argument is here, or the arguments are all for rickshaw/cdm utils.
    # Just checking for lack of '--' in the
    # argument and assuming it is an argument to be passed to rickshaw/cdm
    # does not work here because of previous work to allow
    # skipping "--base-run-dir" and only specifying the run directory.
    if [ $# -eq 1 ]; then
        # There is only 1 argument, and the only two valid options are:
        # <dir>
        # --base-run-dir=<dir>
        # and there is no optional argument to sopeficy the instance
        base_run_dir=$(echo "${1}" | sed -e "s/--base-run-dir\(\s\+\|=\)//")
        shift
    elif [ $# -eq 2 ]; then
        # There are only 2 arguments...
        if [[ "${1}" =~ ^-- ]]; then
            # ...and the first argument starts
            # with '--', so it must be --base-run-dir and <dir>
            # and the optional argument to specify the instance is
            # not present
            shift
            base_run_dir=${1}
            shift
        else
            # ...and the first argument does not start
            # with '--', so the first argument must be the optional
            # argument speficying the instance to use, and the second
            # argument is the <dir>
            instance=${1}
            shift
            base_run_dir=$(echo "${1}" | sed -e "s/--base-run-dir\(\s\+\|=\)//")
            shift
        fi
    elif [ $# -eq 3 ]; then
        # There are 3 agruments, therefore it must be:
        # <instance>
        # --base-run-dir
        # <dir>
        instance=${1}
        shift; shift
        base_run_dir=${1}
        shift
    fi

    if [ "$instance" = "" ]; then
        # Get the default instance to use
        instance=$(${podman_run}\
            --name crucible-manage-instances--${SESSION_ID}\
            ${container_common_args[@]}\
            ${CRUCIBLE_CONTROLLER_IMAGE}\
            ${CRUCIBLE_HOME}/bin/manage_instances.py\
            --cfg ${INSTANCES_CFG}\
            index-instance)
    fi

    cdmver_opt=$(${podman_run}\
        --name crucible-manage-instances--${SESSION_ID}\
        ${container_common_args[@]}\
        ${CRUCIBLE_CONTROLLER_IMAGE}\
        ${CRUCIBLE_HOME}/bin/manage_instances.py\
        --cfg ${INSTANCES_CFG}\
        instance-cdmver-opt --name ${instance})
    access_opt=$(${podman_run}\
        --name crucible-manage-instances--${SESSION_ID}\
        ${container_common_args[@]}\
        ${CRUCIBLE_CONTROLLER_IMAGE}\
        ${CRUCIBLE_HOME}/bin/manage_instances.py\
        --cfg ${INSTANCES_CFG}\
        instance-host-access-opt --name ${instance})
    if [ "$access_opt" == "" ]; then
        echo "ERROR: access informaiton for Opensearch instance ${instance} was empty.  Did you use a valid instance?"
        exit 1
    fi
    if [ "$cdmver_opt" == "" ]; then
        echo "ERROR: CDM version informaiton for Opensearch instance ${instance} was empty.  Did you use a valid instance?"
        exit 1
    fi

    if start_opensearch; then
        index_run "${access_opt}" "${cdmver_opt}" "$base_run_dir"
    fi
elif [ "${1}" == "extract" ]; then
    shift
    case "${1}" in
        run-id)
            shift
            this_id=$(extract_run_id "${1}")
            EXIT_VAL=$?
            echo "${this_id}"
            ;;
        primary-periods)
            shift
            period_ids=$(extract_primary_periods "${1}")
            EXIT_VAL=$?
            echo -e "${period_ids}"
            ;;
        *)
            echo "ERROR: Unknown extract command ${1}"
            EXIT_VAL=1
            ;;
    esac
elif [ "${1}" == "opensearch" ]; then
    shift
    if start_opensearch; then
        if [ "${1}" == "repair" ]; then
            repair_opensearch
        fi
    else
        EXIT_VAL=$?
    fi
elif [ "${1}" == "postprocess" ]; then
    shift
    base_run_dir=$(echo "$@" | sed -e "s/--base-run-dir\(\s\+\|=\)//")
    post_process_run "${base_run_dir}"
    EXIT_VAL=$?
elif [ "${1}" == "run" ]; then
    arg_list="$@"
    shift

    passthru_args=()
    from_file_arg=0

    if [ "${1}" == "--from-file" ]; then
        # use the crucible run file aka 'all-in-one' / single json file
        # crucible run --from-file <all-in-one-json>
        shift
        run_file=${1}
        if [ ! -f $run_file ]; then
            exit_error "File not found: $run_file"
        fi
        # only one arg is expected (json file)
        if [ -n "$run_file" -a $# -gt 1 ]; then
            exit_error "No other options must be speicifed with '--from-file <All-in-One-JSON>'."
        fi

        # extract the list of benchmarks from the run file
        json_info=$(jq '.benchmarks[].name' $run_file)
        benchmark_names=$(echo ${json_info} | sed -e 's/"//g')

        # validate the benchmarks and create the list of their directories
        benchmark_subproj_dir=""
        for this_benchmark in $benchmark_names; do
            this_benchmark_subproj_dir="${CRUCIBLE_HOME}/subprojects/benchmarks/${this_benchmark}"
            if [ ! -e "$this_benchmark_subproj_dir" ]; then
                echo "ERROR: Running benchmark ${this_benchmark} requires that the subproject be"
                echo "located in "${CRUCIBLE_HOME}"/subprojects/bench/$this_benchmark"
                echo "This directory could not be found.  Here are the benchmark"
                echo "subproject directories:"
                /bin/ls "${CRUCIBLE_HOME}"/subprojects/benchmarks
                exit 1
            fi
            benchmark_subproj_dir+=",${this_benchmark_subproj_dir}"
        done
        benchmark_subproj_dir=`echo ${benchmark_subproj_dir} | sed -e 's/^,//'`

        # Create base_run_dir with benchmark name extracted from one-json
        CIFS=$IFS
        IFS=$' '
        benchmark_names=($benchmark_names)
        IFS=$CIFS
        benchmarks=`echo ${benchmark_names[@]} | sed -e 's/ /-and-/g'`
        base_run_dir="${var_run_crucible}/${benchmarks}--${datetime}--${SESSION_ID}"
        mkdir -pv "$base_run_dir/config" >/dev/null

        # Copy the all-in-one json inside the temp base run dir / config
        # so containers can access on blockbreaker commands
        cp ${run_file} ${base_run_dir}/config/${run_file_json}

        from_file_arg=1
        passthru_args+=("--from-file")
        passthru_args+=("${base_run_dir}/config/${run_file_json}")
    else
        echo "********************************************************************************"
        echo "********************************************************************************"
        echo "**                                                                            **"
        echo "** ATTENTION: Usage of the legacy CLI interface is deprecated and will be     **"
        echo "**            removed by the end of the 3rd quarter of 2025 (September 30th). **"
        echo "**            Please migrate to the new JSON runfile interface as soon as     **"
        echo "**            possible to avoid disruption.                                   **"
        echo "**                                                                            **"
        printf "** %-74s **\n" "See ${CRUCIBLE_HOME}/subprojects/docs/examples/runfile/ for runfile details"
        echo "**                                                                            **"
        echo "********************************************************************************"
        echo "********************************************************************************"
        sleep 10

        bench_params="bench-params.json"
        tool_params="tool-params.json"
        use_mv_params=0
        mv_params=""
        no_tools=0

        # backwards compatibility (separated JSON files)
        # if not using all-in-one, benchmark must be 1st arg: crucible run <benchmark>
        benchmark=${1}
        shift
        if [ -z "$benchmark" ]; then
            exit_error "No benchmark specified."
        fi

        # Create base_run_dir with benchmark name extracted from cli
        benchmark_names=($(echo ${benchmark} | sed -e 's/,/ /g'))
        benchmarks=`echo ${benchmark_names[@]} | sed -e 's/ /-and-/g'`
        base_run_dir="${var_run_crucible}/${benchmarks}--${datetime}--${SESSION_ID}"
        mkdir -pv "$base_run_dir/config" >/dev/null

        while [ $# -gt 0 ]; do
            arg=${1}
            shift
            case "${arg}" in
                "--mv-params")
                    val=${1}
                    shift
                    use_mv_params=1
                    mv_params=${val}
                    ;;
                "--tags")
                    val=${1}
                    shift
                    passthru_args+=("${arg}")
                    passthru_args+=("${val}")
                    ;;
                "--bench-params")
                    val=${1}
                    shift
                    bench_params=${val}
                    ;;
                "--tool-params")
                    val=${1}
                    shift
                    tool_params=${val}
                    ;;
                "--bench-ids")
                    val=${1}
                    shift
                    bench_ids_str=${val}
                    ;;
                "--no-tools")
                    no_tools=1
                    ;;
                "--from-file")
                    exit_error "Run 'crucible run --from-file <file.json>' with no other options"
                    ;;
                *)
                    passthru_args+=("${arg}")
                    ;;
            esac
        done

    fi

    if [ -z "${CRUCIBLE_CONTROLLER_IMAGE}" ]; then
        exit_error "Exiting because CRUCIBLE_CONTROLLER_IMAGE is not defined"
    fi

    if [ -e "${var_run_crucible}/latest" ]; then
        /bin/rm "${var_run_crucible}/latest"
    fi

    ln -sf "$base_run_dir" "${var_run_crucible}/latest"
    rs_dir="${CRUCIBLE_HOME}"/subprojects/core/rickshaw

    if [ $from_file_arg == 0 ]; then
        benchmark=$(sed -e 's/^,//' <<< $benchmark)
        bench_list=$(sed -e 's/,/ /' <<< $benchmark)
        for this_benchmark in $bench_list; do
            this_benchmark_subproj_dir="${CRUCIBLE_HOME}"/subprojects/benchmarks/$this_benchmark
            if [ ! -e "$this_benchmark_subproj_dir" ]; then
                echo "ERROR: Running benchmark ${this_benchmark} requires that the subproject be"
                echo "located in "${CRUCIBLE_HOME}"/subprojects/bench/$this_benchmark"
                echo "This directory could not be found.  Here are the benchmark"
                echo "subproject directories:"
                /bin/ls "${CRUCIBLE_HOME}"/subprojects/benchmarks
                exit 1
            fi
            benchmark_subproj_dir+=",${this_benchmark_subproj_dir}"
        done
        benchmark_subproj_dir=`echo ${benchmark_subproj_dir} | sed -e 's/^,//'`

        if [ ${use_mv_params} == 1 ]; then
            count=1
            bench_params=""
            # remove first comma from mv_params list of json files
            # and replace commas with spaces
            mv_params=`echo ${mv_params} | sed -e 's/^,//' | sed -e 's/,/ /g'`
            for this_mv_params in ${mv_params}; do
                if [ ! -e "${this_mv_params}" ]; then
                    exit_error "The multi-value params file you specified with '--mv-params ${this_mv_params}' does not exist!"
                else
                    this_benchmark=`echo ${benchmark} | cut -d, -f$count`
                    this_benchmark_subproj_dir=`echo ${benchmark_subproj_dir} | cut -d, -f$count`
                    echo "Generating --bench-params from --mv-params..."
                    this_mv_params_run_dir=${base_run_dir}/config/${this_benchmark}-mv-params.json
                    # if mv-params come from the run file json, files are already there
                    if [ ! -f "${this_mv_params_run_dir}" ]; then
                        cp ${this_mv_params} ${this_mv_params_run_dir}
                    fi
                    bench_params_run_file=${base_run_dir}/config/${this_benchmark}-bench-params.json
                    bench_params_run_output=${base_run_dir}/config/${this_benchmark}-bench-params.txt

                    multiplex_cmd="${CRUCIBLE_HOME}/subprojects/core/multiplex/multiplex.py --input ${this_mv_params_run_dir} --output ${bench_params_run_file}"
                    if [ -e ${this_benchmark_subproj_dir}/multiplex.json ]; then
                        multiplex_cmd+=" --requirements ${this_benchmark_subproj_dir}/multiplex.json"
                    else
                        echo "Skipping benchmark requirements validation because there is no ${this_benchmark_subproj_dir}/multiplex.json"
                    fi

                    multiplex_cmd="${podman_run} -i --name crucible-multiplex-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} ${multiplex_cmd}"
                    ${multiplex_cmd} > ${bench_params_run_output} 2>&1
                    EXIT_VAL=$?
                    if [ ${EXIT_VAL} != 0 ]; then
                        echo "ERROR: multiplex failed with an error and returned rc=${EXIT_VAL}"
                        echo "multiplex output is:"
                        cat ${bench_params_run_output}
                        exit ${EXIT_VAL}
                    fi
                    this_bench_params=${bench_params_run_file}
                    bench_params+=",${this_bench_params}"
                fi
                let count=${count}+1
            done
            bench_params=`echo ${bench_params} | sed -e 's/^,//'`

        elif [ ! -e ${bench_params} ]; then
            echo "ERROR:"
            echo "Make sure you have defined the benchmark parameters and put them in a file \"./bench-params.json\""
            echo "or that you explicitly specify the benchmark parameters file with \"--bench-params=<file>\"."
            exit 1
        else
            bench_params_run_file=${base_run_dir}/config/bench-params.json
            cp ${bench_params} ${bench_params_run_file}
            bench_params=${bench_params_run_file}
        fi

        tool_params_file=${base_run_dir}/config/tool-params.json
        if [ "${no_tools}" == "0" ]; then
            if [ ! -e ${tool_params} ]; then
                cp $rs_dir/config/tool-params.json ${tool_params_file}
                echo "You do not have a \"tool-params.json\" in the current directory and have not explicitly"
                echo "specified where to find a tool parameters file with \"--tools-params=<file>\"."
                echo ""
                echo "Crucible will use the default tools found in $rs_dir/config/tool-params.json:"
                cat ${tool_params_file}
                echo ""
                echo "If you wish to use different tools, create a tool parameters file which adheres to"
                echo "the proper schema ($rs_dir/schema/tools/json) and either place that file in the"
                echo "current directory named \"tool-params.json\" or explicitly specify it with"
                echo "\"--tool-params=<file>\"."
                echo ""
                echo "You can also disable tools entirely using the \"--no-tools\" parameter."
            else
                cp ${tool_params} ${tool_params_file}
            fi
        else
            echo "Disabling all tools due to --no-tools"
            echo "[]" > ${tool_params_file}
        fi

        params_args=""
        params_args+=" --bench-params ${bench_params}"
        params_args+=" --tool-params ${tool_params_file}"

        if [ -n "${bench_ids_str}" ]; then
            params_args+=" --bench-ids ${bench_ids_str}"
        fi
    fi

    cp ${REGISTRIES_CFG} ${base_run_dir}/config
    ${CRUCIBLE_HOME}/bin/repo info > ${base_run_dir}/config/crucible.repo.info
    ${CRUCIBLE_HOME}/bin/repo details > ${base_run_dir}/config/crucible.repo.details
    ${CRUCIBLE_HOME}/bin/repo config show > ${base_run_dir}/config/crucible.repo.config.show

    start_valkey
    if [ -f "/tmp/valkey_pass" ]; then
        roadblock_password="$(cat /tmp/valkey_pass)"
    else
        roadblock_password="flubber"
    fi
    rs_run_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-run\
      ${params_args}\
      --id ${SESSION_ID}\
      --bench-dir $benchmark_subproj_dir\
      --engine-dir=${CRUCIBLE_HOME}/subprojects/core/engine\
      --roadblock-dir=${CRUCIBLE_HOME}/subprojects/core/roadblock\
      --roadblock-password=$roadblock_password\
      --workshop-dir=${CRUCIBLE_HOME}/subprojects/core/workshop\
      --packrat-dir=${CRUCIBLE_HOME}/subprojects/core/packrat\
      --tools-dir=${CRUCIBLE_HOME}/subprojects/tools\
      --registries-json=${REGISTRIES_CFG}\
      --base-run-dir=$base_run_dir\
      --external-userenvs-dir=${CRUCIBLE_HOME}/subprojects/userenvs\
      ${passthru_args[@]}"

    echo "rickshaw-run command: $rs_run_cmd"

    if [ -n "$CRUCIBLE_DRY_RUN" ]; then
        echo "Warning: CRUCIBLE_DRY_RUN environment variable is set, exiting..."
        exit 0
    fi

    EXIT_VAL=$?
    if [ ${EXIT_VAL} != 0 ]; then
        exit ${EXIT_VAL}
    fi

    ${podman_run} --name crucible-rickshaw-run-${SESSION_ID} --tty "${container_common_args[@]}" "${container_rs_args[@]}" "${container_build_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} ${rs_run_cmd}
    RC=$?

    if [ ${RC} == 0 ]; then
        post_process_run ${base_run_dir} &&\
        instance=$(${podman_run}\
            --name crucible-manage-instances--${SESSION_ID}\
            ${container_common_args[@]}\
            ${CRUCIBLE_CONTROLLER_IMAGE}\
            ${CRUCIBLE_HOME}/bin/manage_instances.py\
            --cfg ${INSTANCES_CFG}\
            index-instance)
        cdmver_opt=$(${podman_run}\
            --name crucible-manage-instances--${SESSION_ID}\
            ${container_common_args[@]}\
            ${CRUCIBLE_CONTROLLER_IMAGE}\
            ${CRUCIBLE_HOME}/bin/manage_instances.py\
            --cfg ${INSTANCES_CFG}\
            instance-cdmver-opt --name ${instance})
        access_opt=$(${podman_run}\
            --name crucible-manage-instances--${SESSION_ID}\
            ${container_common_args[@]}\
            ${CRUCIBLE_CONTROLLER_IMAGE}\
            ${CRUCIBLE_HOME}/bin/manage_instances.py\
            --cfg ${INSTANCES_CFG}\
            instance-host-access-opt --name ${instance})
        if [ "$access_opt" == "" ]; then
            echo "ERROR: access informaiton for Opensearch instance ${instance} was empty.  Did you use a valid instance?"
            exit 1
        fi
        if [ "$cdmver_opt" == "" ]; then
            echo "ERROR: CDM version informaiton for Opensearch instance ${instance} was empty.  Did you use a valid instance?"
            exit 1
        fi
        index_run "${access_opt}" "${cdmver_opt}" "$base_run_dir" &&\
        get_result_to_file "${base_run_dir}" --run $(extract_run_id "${base_run_dir}")
        EXIT_VAL=$?
    else
        echo "Skipping run post-processing due to error(s) [rc=${RC}]"
        EXIT_VAL=${RC}
    fi

    if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
        sleep 1
        logfile="${base_run_dir}/crucible.log.xz"
        echo "Archiving crucible log to ${logfile}"
        crucible_log view ${LOG_DB} sessionid ${SESSION_ID} | xz -9 -T0 > ${logfile}
        PIPES_RCS=$(echo ${PIPESTATUS[@]})
        RC=0
        for PIPE_RC in ${PIPES_RC}; do
            RC=$(( ${RC} + ${PIPE_RC} ))
        done
        if [ ${EXIT_VAL} == 0 ]; then
            EXIT_VAL=${RC}
        fi
    fi
elif [ "${1}" == "archive" ]; then
    shift
    while [ $# -gt 0 -a ${EXIT_VAL} == 0 ]; do
        archive_run "${1}"
        EXIT_VAL=$?
        shift
    done
elif [ "${1}" == "unarchive" ]; then
    shift
    while [ $# -gt 0 -a ${EXIT_VAL} == 0 ]; do
        unarchive_run "${1}"
        EXIT_VAL=$?
        shift
    done
elif [ "${1}" == "reset" ]; then
    shift

    echo "Initializing OpenSearch "
    if start_opensearch; then
        reinit_opensearch
        RC=$?
        if [ ${EXIT_VAL} == 0 ]; then
            EXIT_VAL=${RC}

            if [ -n "${1}" -a "${1}" == "hard" ]; then
                echo "Hard reset requested, removing all results from ${var_run_crucible}"
                rm -Rf ${var_run_crucible}/*
                RC=$?
                EXIT_VAL=${RC}
            fi

        fi
    else
        EXIT_VAL=$?
    fi
elif [ "${1}" == "wrapper" ]; then
    shift
    ${podman_run} --name crucible-wrapper-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" "${container_build_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} $@
    EXIT_VAL=$?
else
    echo "ERROR: This function has not been implemented"
    EXIT_VAL=1
fi


exit ${EXIT_VAL}
