#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

LOG_DB="${1}"
shift

if [ -z "${CRUCIBLE_HOME}" -o ! -e "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: Could not find \${CRUCIBLE_HOME} [${CRUCIBLE_HOME}], exiting."
    exit 1
fi

if [ -z "${LOG_DB}" -o ! -e "${LOG_DB}" -a "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    echo "ERROR: Could not find \${LOG_DB} [${LOG_DB}], exiting."
    exit 2
fi

. /etc/sysconfig/crucible
. $CRUCIBLE_HOME/bin/base

EXIT_VAL=0

if [ "${1}" == "log" ]; then
    shift
    crucible_log ${1} ${LOG_DB}
    EXIT_VAL=$?
elif [ "${1}" == "ls" -o "${1}" == "tags" -o "${1}" == "result-completion" ]; then
    result_process_cmd="${CRUCIBLE_HOME}/bin/result-processor.py"
    case "${1}" in
        ls|tags)
            $podman_run --name crucible-result-processor-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} ${result_process_cmd} "$@"
            EXIT_VAL=$?
            ;;
        result-completion)
            shift
            $podman_run --name crucible-result-processor-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} ${result_process_cmd} completion "$@"
            EXIT_VAL=$?
            ;;
    esac
elif [ "${1}" == "repo" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/repo info
        EXIT_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/repo "$@"
        EXIT_VAL=$?
    fi
elif [ "${1}" == "update" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/update all
        EXIT_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/update ${1}
        EXIT_VAL=$?
    fi
elif [ "${1}" == "start" ]; then
    shift
    if [ "${1}" == "httpd" ]; then
        shift
        start_httpd
        EXIT_VAL=$?
    elif [ "${1}" == "es" ]; then
        shift
        start_es
        EXIT_VAL=$?
    elif [ "${1}" == "redis" ]; then
        shift
        start_redis
        EXIT_VAL=$?
    fi
elif [ "${1}" == "stop" ]; then
    shift
    if [ "${1}" == "httpd" ]; then
        shift
        stop_httpd
        EXIT_VAL=$?
    elif [ "${1}" == "es" ]; then
        shift
        stop_es
        EXIT_VAL=$?
    elif [ "${1}" == "redis" ]; then
        shift
        stop_redis
        EXIT_VAL=$?
    fi
elif [ "${1}" == "get" ]; then
    shift
    if start_httpd; then
        if ! start_es; then
            EXIT_VAL=$?
        fi
    else
        EXIT_VAL=$?
    fi
    if [ $EXIT_VAL == 0 ]; then
        if [ "${1}" == "result" ]; then
            shift
            get_result_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/get-result-summary.sh"
            $podman_run --name crucible-get-result-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $get_result_cmd "$@"
            EXIT_VAL=$?
        elif [ "${1}" == "metric" ]; then
            shift
            get_metric_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/get-metric-data.sh"
            $podman_run --name crucible-get-metric-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $get_metric_cmd "$@"
            EXIT_VAL=$?
        else
            echo "ERROR: unsupported 'get' argument [${1}]"
            EXIT_VAL=1
        fi
    fi
elif [ "${1}" == "rm" ]; then
    shift
    if start_es; then
       rm_result_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/delete-run.sh"
       $podman_run --name crucible-rm-result-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rm_result_cmd "$@"
    fi
    EXIT_VAL=$?
elif [ "${1}" == "index" ]; then
    shift
    if start_es; then
        index_result_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-index"
        $podman_run --name crucible-rickshaw-index-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $index_result_cmd "$@"
    fi
    EXIT_VAL=$?
elif [ "${1}" == "extract" ]; then
    shift
    case "${1}" in
        run-id)
            shift
            this_id=$(extract_run_id "${1}")
            EXIT_VAL=$?
            echo "${this_id}"
            ;;
        primary-periods)
            shift
            period_ids=$(extract_primary_periods "${1}")
            EXIT_VAL=$?
            echo -e "${period_ids}"
            ;;
        *)
            echo "ERROR: Unknown extract command ${1}"
            EXIT_VAL=1
            ;;
    esac
elif [ "${1}" == "es" ]; then
    shift
    if start_es; then
        if [ "${1}" == "init" ]; then
            init_es
        elif [ "${1}" == "rebuild" ]; then
            reinit_es
        fi
        if [ ${EXIT_VAL} == 0 -a "${1}" == "rebuild" ]; then
            if pushd ${var_run_crucible} >/dev/null; then
                for base_run_dir in `/bin/ls | grep -v latest`; do
                    if [ -d "$base_run_dir" ]; then
                        echo "Going to post-process and index $base_run_dir"
                        post_process_run "${var_run_crucible}/${base_run_dir}"
                        RC=$?
                        if [ ${RC} != 0 ]; then
                            echo "ERROR: Failed to post-process ${base_run_dir} [rc=${RC}]"
                        fi
                    fi
                done
                popd >/dev/null
            else
                echo "ERROR: Could not chdir to ${var_run_crucible}"
                EXIT_VAL=1
            fi
        fi
    else
        EXIT_VAL=$?
    fi
elif [ "${1}" == "postprocess" ]; then
    shift
    base_run_dir=$(echo "$@" | sed -e "s/--base-run-dir\(\s\+\|=\)//")
    post_process_run "${base_run_dir}"
    EXIT_VAL=$?
elif [ "${1}" == "run" ]; then
    arg_list="$@"
    shift
    benchmark=${1}
    shift
    base_run_dir="${var_run_crucible}/${benchmark}--${datetime}--${SESSION_ID}"

    bench_params="bench-params.json"
    tool_params="tool-params.json"
    use_mv_params=0
    mv_params=""
    no_tools=0

    passthru_args=()
    while [ $# -gt 0 ]; do
        arg=${1}
        shift
        case "${arg}" in
            "--mv-params")
                val=${1}
                shift
                use_mv_params=1
                mv_params=${val}
                ;;
            "--tags")
                val=${1}
                shift
                passthru_args+=("${arg}")
                passthru_args+=("${val}")
                ;;
            "--bench-params")
                val=${1}
                shift
                bench_params=${val}
                ;;
            "--tool-params")
                val=${1}
                shift
                tool_params=${1}
                ;;
            "--no-tools")
                no_tools=1
                ;;
            "--from-file")
                run_file=${1}
                mv_params=${base_run_dir}/mv_params.json
                tool_params=${base_run_dir}/tool-params.json
                python3 ${TOOLBOX_HOME}/bin/get-json-config.py --json ${run_file} --mv-params > $mv_params
                python3 ${TOOLBOX_HOME}/bin/get-json-config.py --json ${run_file} --tool-params > $tool_params
                passthru_args=$(python3 ${TOOLBOX_HOME}/bin/get-json-config.py --json ${run_file} --passthru_args)
                use_mv_params=1
                ;;
            *)
                passthru_args+=("${arg}")
                ;;
        esac
    done
    if [ -z "$CRUCIBLE_CLIENT_SERVER_REPO" ]; then
        exit_error "CRUCIBLE_CLIENT_SERVER_REPO is not defined"
    fi
    if [ -z "$CRUCIBLE_CONTAINER_IMAGE" ]; then
        exit_error "Exiting because CRUCIBLE_CONTAINER_IMAGE is not defined"
    fi
    mkdir -pv "$base_run_dir/config" >/dev/null
    if [ -e "${var_run_crucible}/latest" ]; then
        /bin/rm "${var_run_crucible}/latest"
    fi
    ln -sf "$base_run_dir" "${var_run_crucible}/latest"
    benchmark_subproj_dir="${CRUCIBLE_HOME}"/subprojects/benchmarks/$benchmark
    rs_dir="${CRUCIBLE_HOME}"/subprojects/core/rickshaw

    if [ ! -e "$benchmark_subproj_dir" ]; then
        echo "ERROR: Running benchmark ${benchmark} requires that the subproject be"
        echo "located in "${CRUCIBLE_HOME}"/subprojects/bench/$benchmark"
        echo "This directory could not be found.  Here are the benchmark"
        echo "subproject directories:"
        /bin/ls "${CRUCIBLE_HOME}"/subprojects/bench/$benchmark
        exit 1
    fi

    if [ ${use_mv_params} == 1 ]; then
        if [ ! -e "${mv_params}" ]; then
            exit_error "The multi-value params file you specified with --mv-params (${mv_params}) does not exist!"
        else
            echo "Generating --bench-params from --mv-params..."

            mv_params_run_dir=${base_run_dir}/config/mv-params.json
            cp ${mv_params} ${mv_params_run_dir}
            bench_params_run_file=${base_run_dir}/config/bench-params.json
            bench_params_run_output=${base_run_dir}/config/bench-params.txt

            multiplex_cmd="${CRUCIBLE_HOME}/subprojects/core/multiplex/multiplex.py --input ${mv_params_run_dir} --output ${bench_params_run_file}"
            if [ -e ${benchmark_subproj_dir}/multiplex.json ]; then
                multiplex_cmd+=" --requirements ${benchmark_subproj_dir}/multiplex.json"
            else
                echo "Skipping benchmark requirements validation because there is no ${benchmark_subproj_dir}/multiplex.json"
            fi

            multiplex_cmd="$podman_run -i --name crucible-multiplex-${SESSION_ID} "${container_common_args[@]}" $CRUCIBLE_CONTAINER_IMAGE ${multiplex_cmd}"
            echo "${multiplex_cmd} > ${bench_params_run_output} 2>&1"
            ${multiplex_cmd} > ${bench_params_run_output} 2>&1
            EXIT_VAL=$?
            if [ ${EXIT_VAL} != 0 ]; then
                echo "ERROR: multiplex failed with an error and returned rc=$rc"
                echo "multiplex output is:"
                cat ${bench_params_run_output}
                exit ${EXIT_VAL}
            fi

            bench_params=${bench_params_run_file}
        fi
    elif [ ! -e ${bench_params} ]; then
        echo "ERROR:"
        echo "Make sure you have defined the benchmark parameters and put them in a file \"./bench-params.json\""
        echo "or that you explicitly specify the benchmark parameters file with \"--bench-params=<file>\"."
        exit 1
    else
        bench_params_run_file=${base_run_dir}/config/bench-params.json
        cp ${bench_params} ${bench_params_run_file}
        bench_params=${bench_params_run_file}
    fi

    tool_params_file=${base_run_dir}/config/tool-params.json
    if [ "${no_tools}" == "0" ]; then
        if [ ! -e ${tool_params} ]; then
            cp $rs_dir/config/tool-params.json ${tool_params_file}
            echo "You do not have a \"tool-params.json\" in the current directory and have not explicitly"
            echo "specified where to find a tool parameters file with \"--tools-params=<file>\"."
            echo ""
            echo "Crucible will use the default tools found in $rs_dir/config/tool-params.json:"
            cat ${tool_params_file}
            echo ""
            echo "If you wish to use different tools, create a tool parameters file which adheres to"
            echo "the proper schema ($rs_dir/schema/tools/json) and either place that file in the"
            echo "current directory named \"tool-params.json\" or explicitly specify it with"
            echo "\"--tool-params=<file>\"."
            echo ""
            echo "You can also disable tools entirely using the \"--no-tools\" parameter."
        else
            cp ${tool_params} ${tool_params_file}
        fi
    else
        echo "Disabling all tools due to --no-tools"
        echo "[]" > ${tool_params_file}
    fi

    params_args=""
    params_args+=" --bench-params ${bench_params}"
    params_args+=" --tool-params ${tool_params_file}"

    start_redis
    EXIT_VAL=$?
    if [ ${EXIT_VAL} != 0 ]; then
        exit ${EXIT_VAL}
    fi

    ${CRUCIBLE_HOME}/bin/repo info > ${base_run_dir}/config/crucible.repo.info
    ${CRUCIBLE_HOME}/bin/repo details > ${base_run_dir}/config/crucible.repo.details

    rs_run_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-run\
      ${params_args}\
      --id ${SESSION_ID}\
      --bench-dir $benchmark_subproj_dir\
      --engine-dir=${CRUCIBLE_HOME}/subprojects/core/engine\
      --roadblock-dir=${CRUCIBLE_HOME}/subprojects/core/roadblock\
      --workshop-dir=${CRUCIBLE_HOME}/subprojects/core/workshop\
      --packrat-dir=${CRUCIBLE_HOME}/subprojects/core/packrat\
      --tools-dir=${CRUCIBLE_HOME}/subprojects/tools\
      --base-run-dir=$base_run_dir\
      ${passthru_args[@]}"
    $podman_run --name crucible-rickshaw-run-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" "${container_build_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_run_cmd
    RC=$?

    if [ ${RC} == 0 ]; then
        post_process_run ${base_run_dir}
        EXIT_VAL=$?
    else
        echo "Skipping run post-processing due to error(s) [rc=${RC}]"
        EXIT_VAL=${RC}
    fi

    if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
        sleep 1
        logfile="${base_run_dir}/crucible.log.xz"
        echo "Archiving crucible log to ${logfile}"
        crucible_log view ${LOG_DB} sessionid ${SESSION_ID} | xz -9 -T0 > ${logfile}
        PIPES_RCS=$(echo ${PIPESTATUS[@]})
        RC=0
        for PIPE_RC in ${PIPES_RC}; do
            RC=$(( ${RC} + ${PIPE_RC} ))
        done
        if [ ${EXIT_VAL} == 0 ]; then
            EXIT_VAL=${RC}
        fi
    fi

    send_notification "Finished run command '${arg_list}' with return value '${EXIT_VAL}'.  Results are available in '${base_run_dir}'."
    RC=$?
    if [ ${EXIT_VAL} == 0 ]; then
        EXIT_VAL=${RC}
    fi
elif [ "${1}" == "notify" ]; then
    shift
    ntfy_doc_url="https://github.com/dschep/ntfy"
    if [ "${1}" == "config" ]; then
        shift
        echo "Currently notification configuration is a manual process where the user must create ${USER_STORE}/ntfy.yml with at least one backend.  See ${ntfy_doc_url} for details."
        EXIT_VAL=0
    elif [ "${1}" == "test" ]; then
        shift

        if [ ! -e ${USER_STORE}/ntfy.yml ]; then
            echo "ERROR: You must configure at least one notification backend in ${USER_STORE}/ntfy.yml.  See ${ntfy_doc_url} for details."
            EXIT_VAL=1
        else
            send_notification "notification test"
            EXIT_VAL=$?
        fi
    else
        echo "ERROR: unsupported 'notify' argument [${1}]"
        EXIT_VAL=1
    fi
elif [ "${1}" == "archive" ]; then
    shift
    while [ $# -gt 0 -a ${EXIT_VAL} == 0 ]; do
        archive_run "${1}"
        EXIT_VAL=$?
        shift
    done
elif [ "${1}" == "unarchive" ]; then
    shift
    while [ $# -gt 0 -a ${EXIT_VAL} == 0 ]; do
        unarchive_run "${1}"
        EXIT_VAL=$?
        shift
    done
elif [ "${1}" == "reset" ]; then
    shift

    echo "Initializing ES "
    if start_es; then
        reinit_es
        RC=$?
        if [ ${EXIT_VAL} == 0 ]; then
            EXIT_VAL=${RC}

            if [ -n "${1}" -a "${1}" == "hard" ]; then
                echo "Hard reset requested, removing all results from ${var_run_crucible}"
                rm -Rf ${var_run_crucible}/*
                RC=$?
                EXIT_VAL=${RC}
            fi
        fi
    else
        EXIT_VAL=$?
    fi
elif [ "${1}" == "wrapper" ]; then
    shift
    ${podman_run} --name crucible-wrapper-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" "${container_build_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} $@
    EXIT_VAL=$?
else
    echo "ERROR: This function has not been implemented"
    EXIT_VAL=1
fi

exit ${EXIT_VAL}
