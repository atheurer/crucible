#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

LOG_DB="${1}"
shift

if [ -z "${CRUCIBLE_HOME}" -o ! -e "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: Could not find \${CRUCIBLE_HOME} [${CRUCIBLE_HOME}], exiting."
    exit 1
fi

if [ -z "${LOG_DB}" -o ! -e "${LOG_DB}" -a "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    echo "ERROR: Could not find \${LOG_DB} [${LOG_DB}], exiting."
    exit 2
fi

. /etc/sysconfig/crucible
. $CRUCIBLE_HOME/bin/base

container_redis_args=()
container_redis_args+=("-d")
container_redis_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/redis.conf,destination=/etc/redis.conf")

container_httpd_args=()
container_httpd_args+=("-d")
container_httpd_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/httpd/,destination=/etc/httpd/")

container_es_args=()
container_es_args+=("-d")
#container_es_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/elasticsearch/,destination=/etc/elasticsearch/")

container_rs_args=()
container_rs_args+=("-i")
container_rs_args+=("-e RS_REG_REPO=$CRUCIBLE_CLIENT_SERVER_REPO")
container_rs_args+=("-e RS_REG_AUTH=$CRUCIBLE_CLIENT_SERVER_AUTH")
container_rs_args+=("-e RS_EMAIL=$CRUCIBLE_EMAIL")
container_rs_args+=("-e RS_NAME=\"$CRUCIBLE_NAME\"")

container_query_args=()
container_query_args+=("-i")
cdm_query_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/query.sh"


if [ "${1}" == "log" ]; then
    shift
    crucible_log ${1} ${LOG_DB}
    RET_VAL=$?
elif [ "${1}" == "repo" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/repo status
        RET_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/repo "$@"
        RET_VAL=$?
    fi
elif [ "${1}" == "update" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/update all
        RET_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/update ${1}
        RET_VAL=$?
    fi
elif [ "${1}" == "list-runs" ]; then
    # Run results are maintained in two formats/locations:
    # 1) The raw run data that rickshaw generates, found in $default_runs_dir/<$benchmark-$datatime-$tags>
    # 2) The data transformed and indexed in ES, found in $default_es
    # We have these two formats because ES cannot contain every single element of
    # data that is produced by rickshaw, and even if it did, some data is easier to
    # search in a dir/file heirarchy.  Also, as formats change over time, we may need
    # to regenerate data in ES, and we prefer to have the original rickshaw data to do
    # this.
    #
    # So, when we want to see what runs are stored on this controller, we need to search
    # both locations and warn if a run is found in just one of the locations.
    #
    # When we show any details about a run (summary, metrics), we always get this from ES.
    # If the run is not in ES, we note that in the output, and the user will need to 
    # have rickshaw export its data to ES-compatible documents and index those into ES.
    #
    # In order to get run info from both formats, we start with a rickshaw utility,
    # and that utility calls utils from the CommonDataModel subproject to query ES.
    $podman_run "${container_common_args[@]}" "${container_query_args[@]}" \
        $CRUCIBLE_CONTAINER_IMAGE list-runs rickshaw-list-runs --runs-dir $default_runs_dir --es $default_es \
        --cdmq-dir="${CRUCIBLE_HOME}"/subprojects/core/CommonDataModel/queries/cdmq
elif [ "${1}" == "run" ]; then 
    shift
    benchmark=${1}
    shift
    base_run_dir=""
    bench_params="bench-params.json"
    tool_params="tools-params.json"
    use_mv_params=0
    mv_params=""

    passthru_args=()
    while [ $# -gt 0 ]; do
        arg=${1}
        shift
        case "${arg}" in
            "--mv-params")
                val=${1}
                shift
                use_mv_params=1
                mv_params=${val}
                ;;
            "--tags")
                val=${1}
                shift
                base_run_dir="--${val}"
                passthru_args+=("${arg}")
                passthru_args+=("${val}")
                ;;
            "--bench-params")
                val=${1}
                shift
                bench_params=${val}
                ;;
            "--tool-params")
                val=${1}
                shift
                tools_params=${1}
                ;;
            *)
                passthru_args+=("${arg}")
                ;;
        esac
    done
    base_run_dir="$var_crucible/run/$benchmark-$datetime$base_run_dir"
    if [ -z "$CRUCIBLE_CLIENT_SERVER_REPO" ]; then
        exit_error "CRUCIBLE_CLIENT_SERVER_REPO is not defined"
    fi
    if [ -z "$CRUCIBLE_CLIENT_SERVER_AUTH" ]; then
        exit_error "CRUCIBLE_CLIENT_SERVER_AUTH is not defined"
    fi
    if [ -z "$CRUCIBLE_CONTAINER_IMAGE" ]; then
        echo "Exiting because CRUCIBLE_CONTAINER_IMAGE is not defined"
        exit 1
    else
        $podman_pull $CRUCIBLE_CONTAINER_IMAGE
    fi
    mkdir -pv "$base_run_dir/config"
    benchmark_subproj_dir="${CRUCIBLE_HOME}"/subprojects/benchmarks/$benchmark
    rs_dir="${CRUCIBLE_HOME}"/subprojects/core/rickshaw

    if [ "${use_mv_params}" == "1" ]; then
        if [ ! -e "${mv_params}" ]; then
            echo "The multi-value params file you specified with --mv-params (${mv_params}) does not exist!"
            exit 1
        else
            mv_params_run_dir=${base_run_dir}/config/mv-params.json
            cp -v ${mv_params} ${mv_params_run_dir}
            bench_params_run_dir=${base_run_dir}/config/bench-params.json

            echo "Generating --bench-params from --mv-params..."
            echo "$podman_run -i --name crucible-multiplex "${container_common_args[@]}" $CRUCIBLE_CONTAINER_IMAGE /opt/crucible/subprojects/core/multiplex/multiplex.py --input ${mv_params_run_dir} > ${bench_params_run_dir}"
            $podman_run -i --name crucible-multiplex "${container_common_args[@]}" $CRUCIBLE_CONTAINER_IMAGE /opt/crucible/subprojects/core/multiplex/multiplex.py --input ${mv_params_run_dir} > ${bench_params_run_dir}

            bench_params=${bench_params_run_dir}
        fi
    elif [ ! -e ${bench_params} ]; then
        echo "Make sure you have defined the benchmark parameters and put them in a file \"./bench-params.json\""
        echo "or that you explicitly specify the benchmark parameters file with \"--bench-params=<file>\"."
        exit 1
    else
        bench_params_run_dir=${base_run_dir}/config/bench-params.json
        cp -v ${bench_params} ${bench_params_run_dir}
        bench_params=${bench_params_run_dir}
    fi

    tool_params_file=${base_run_dir}/config/tool-params.json
    if [ ! -e ${tool_params} ]; then
        echo "You do not have a \"tool-params.json\" in the current directory and have not explicitly"
        echo "specified where to find a tool parameters file with \"--tools-params=<file>\"."
        echo ""
        echo "Crucible will use the default tools found in $rs_dir/config/tool-params.json."
        echo ""
        echo "If you wish to use different tools, create a tool parameters file which adheres to"
        echo "the proper schema ($rs_dir/schema/tools/json) and either place that file in the"
        echo "current directory named \"tool-params.json\" or explicitly specify it with"
        echo "\"--tool-params=<file>\"."
        cp -v $rs_dir/config/tool-params.json ${tool_params_file}
    else
        cp -v ${tools_params} ${tool_params_file}
    fi

    params_args=""
    params_args+=" --bench-params ${bench_params}"
    params_args+=" --tool-params ${tool_params_file}"

    if [ ! -e "$benchmark_subproj_dir" ]; then
        echo "Running benchmark $benchmark requires that subproject"
        echo "located in "${CRUCIBLE_HOME}"/subprojects/bench/$benchmark"
        echo "This directory could not be found.  Here are the benchmark"
        echo "subproject directories:"
        /bin/ls "${CRUCIBLE_HOME}"/subprojects/bench/$benchmark
        exit 1
    fi
    redis_cmd="/usr/bin/redis-server /etc/redis.conf"
    httpd_cmd="/usr/sbin/httpd -DFOREGROUND"
    es_start_cmd="${CRUCIBLE_HOME}/config/start-es.sh $var_crucible/es"
    es_init_cmd="${CRUCIBLE_HOME}/config/init-es.sh ${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/templates"
    rs_run_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-run\
      ${params_args}\
      --bench-dir $benchmark_subproj_dir\
      --roadblock-dir=${CRUCIBLE_HOME}/subprojects/core/roadblock\
      --workshop-dir=${CRUCIBLE_HOME}/subprojects/core/workshop\
      --tools-dir=${CRUCIBLE_HOME}/subprojects/tools\
      --base-run-dir=$base_run_dir\
      ${passthru_args[@]}"
    rs_pp_b_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-bench\
      --base-run-dir=$base_run_dir"
    rs_pp_t_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-tools\
      --base-run-dir=$base_run_dir"
    rs_pp_c_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-consolidate\
      --base-run-dir=$base_run_dir"
    rs_export_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-export\
      --base-run-dir=$base_run_dir"
    echo "Checking for redis"
    if podman ps | grep -q crucible-redis; then
        echo "...appears to be running"
    else
        echo "...not present, starting a container for it:"
	firewall-cmd --zone=public --add-port=6379/tcp
        echo "$podman_run --name crucible-redis ${container_common_args[@]} ${container_redis_args[@]} $CRUCIBLE_CONTAINER_IMAGE $redis_cmd"
        $podman_run --name crucible-redis "${container_common_args[@]}" "${container_redis_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $redis_cmd
    fi
    RET_VAL=$?
    if [ $RET_VAL -gt 0 ]; then
        exit_error "Could not start redis"
    fi

    echo "Checking for httpd"
    if podman ps | grep -q crucible-httpd; then
        echo "...appears to be running"
    else
        echo "...not present, starting a container for it:"
     firewall-cmd --zone=public --add-port=8080/tcp
        echo "$podman_run --name crucible-httpd ${container_common_args[@]} ${container_httpd_args[@]} $CRUCIBLE_CONTAINER_IMAGE $httpd_cmd"
        $podman_run --name crucible-httpd "${container_common_args[@]}" "${container_httpd_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $httpd_cmd
    fi
    if [ $RET_VAL -gt 0 ]; then
        exit_error "Could not start httpd"
    fi

    echo "Checking for elasticsearch"
    if podman ps | grep -q crucible-es; then
        echo "...appears to be running"
    else
        echo "...not present, starting a container for it:"
     firewall-cmd --zone=public --add-port=9200/tcp --add-port=9300/tcp
        mkdir -p "$var_crucible/es"
        echo "$podman_run --name crucible-es ${container_common_args[@]} ${container_es_args[@]} $CRUCIBLE_CONTAINER_IMAGE $es_start_cmd"
        $podman_run --name crucible-es "${container_common_args[@]}" "${container_es_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $es_start_cmd
    fi
    if [ $RET_VAL -gt 0 ]; then
        exit_error "Could not start elasticseach"
    fi

    echo "$podman_run --name crucible-run ${container_common_args[@]} ${container_rs_args[@]} $CRUCIBLE_CONTAINER_IMAGE $rs_run_cmd"
    $podman_run --name crucible-run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_run_cmd
    if [ $RET_VAL -eq 0 ]; then
        $podman_run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_b_cmd && \
        $podman_run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_t_cmd && \
        $podman_run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_c_cmd && \
	    echo "Benchmark result is in $base_run_dir" && \
        $podman_run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $es_init_cmd
        RET_VAL=$?
        if [ -f "$base_run_dir/run/rickshaw-result.json" -a $RET_VAL -eq 0 ]; then
            $podman_run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_export_cmd
            RET_VAL=$?
            if [ $RET_VAL -eq 0 ]; then
	            echo "Benchmark result now in elastic, localhost:9200"
                $podman_run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE jq -r '."run-id"' $base_run_dir/run/rickshaw-result.json | tr -d '\n' 
                # Yes, there's a carriage return in this output, and no, I have no idea why...
                this_id=`$podman_run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE jq -r '."run-id"' $base_run_dir/run/rickshaw-result.json | tr -d '\r'`
                if [ ! -z "$this_id" ]; then
                    cdm_query_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/get-result-summary.sh"
                    cdm_query_cmd+=" --run=$this_id"
                    echo "Generating benchmark summary report"
                    sleep 5 # ES may take 5 seconds to have data ready (from a setting which can vastly improve index operations)
                    $podman_run "${container_common_args[@]}" "${container_query_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $cdm_query_cmd | tee "$base_run_dir/run/result-summary.txt"
                    RET_VAL=$?
                    if [ $RET_VAL -eq 0 ]; then
                        echo
                        echo "Benchmark summary is complete and can be found in:"
                        echo "$base_run_dir/run/result-summary.txt"
                    else
                        echo "ERROR: Could not generate benchmark summary"
                    fi
                else
                    echo "ERROR: Could not get the run-id from this run"
                fi
            else
                echo "ERROR: Could not index result into elasticsearch"
            fi
	    fi
    fi

    if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
	echo "Archiving crucible log to ${base_run_dir}"
	crucible_log view ${LOG_DB} last | xz -9 -T0 > ${base_run_dir}/crucible.log.xz
    fi
elif [ "${1}" == "wrapper" ]; then
    shift
	$podman_run --name crucible-wrapper "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $@
    RET_VAL=$?
else
    echo "This function has not been implemented"
fi

exit ${RET_VAL}
