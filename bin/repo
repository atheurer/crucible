#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# repo management infrastructure

if [ ! -e $CRUCIBLE_HOME ]; then
    echo "Could not find $CRUCIBLE_HOME, exiting."
    exit 1
fi

source "${CRUCIBLE_HOME}/bin/base"

function help() {
    echo "Usage:"
    echo "  repo <command> [command-specific-options]"
    echo ""
    echo "The following commands are supported"
    echo ""
    echo "info          |  Give high level info about the active repositories (default)"
    echo "details       |  Give details for the active repositories"
    echo ""
}

if [ "$1" == "help" ]; then
    help
    exit
elif [ -z "$1" ]; then
    command="info"
else
    command=$1
    shift
fi

function repo_info() {
    local repo=$1
    local alt_dir=$2

    local type=$(echo "${repo}" | awk -F'/' '{ print $1 }')
    local name=$(echo "${repo}" | awk -F'/' '{ print $2 }')

    if [ -z "${alt_dir}" ]; then
        local dir=$(readlink -e ${repo})
        local error=${repo}
    else
        local dir=${alt_dir}
        local error=${dir}
    fi

    if [ -z "${dir}" ]; then
        echo "Error finding directory [${error}]"
        return
    fi

    if pushd ${dir} > /dev/null; then
        local git_status=$(git_get_status)
        local git_tracked_entries=$(git_get_tracked_entries "${git_status}")
        if [ "${git_tracked_entries}" == "0" ]; then
            local_changes="N"
        else
            local_changes="Y"
        fi
        local git_tracking=$(git_get_tracking "${git_status}")
        local git_local_branch=$(git_get_local_branch "${git_status}")
        if [ -n "${git_tracking}" ]; then
            local git_remote_name=$(git_get_remote_name "${git_tracking}")
            local git_remote_branch=$(git_get_remote_branch "${git_tracking}")
            local git_remote_url=$(git remote get-url ${git_remote_name})
        else
            # this likely means the branch is not tracking any
            # upstream repository branch (yet)
            local git_remote_name="N/A"
            local git_remote_branch="N/A"
            local git_remote_url="N/A"
        fi

        local current_commit=$(git rev-parse --short HEAD)

        local git_delta_behind=$(git_get_delta_behind "${git_status}")
        if [ "${git_delta_behind}" == "0" ]; then
            updates_available="-"
        else
            updates_available="${git_delta_behind}"
        fi

        popd > /dev/null
    else
        echo "ERROR: Failed to pushd to ${dir}"
    fi

    printf "${fmt_line}\n" "${name}" "${type}" "${git_local_branch}" "${git_remote_url}" "${git_remote_branch}" "${git_remote_name}" "${local_changes}" "${current_commit}" "${updates_available}"
}

function repo_details() {
    local repo=${1}
    local alt_dir=${2}

    local type=$(echo "${repo}" | awk -F'/' '{ print $1 }')
    local name=$(echo "${repo}" | awk -F'/' '{ print $2 }')

    if [ -z "${alt_dir}" ]; then
        local dir=$(readlink -e ${repo})
        local error=${repo}
    else
        local dir=${alt_dir}
        local error=${dir}
    fi

    if [ -z "${dir}" ]; then
        echo "Error finding directory [${error}]"
        return
    fi

    local section_title=-
    if [ -z "${type}" ]; then
        section_title=" ${name} "
    else
        section_title=" ${type}:${name} "
    fi
    local section_title_length=$(echo ${section_title} | wc -c)
    local width=80
    local header_width=$(( (${width} - ${section_title_length}) / 2 ))
    local header=$(printf "%0${header_width}d" 0 | sed -e 's/0/#/g')
    local footer=$(printf "%0${width}d" 0 | sed -e 's/0/*/g')

    if pushd ${dir} > /dev/null; then
        printf "%s%s%s\n" "${header}" "${section_title}" "${header}"

        git status --verbose --untracked-files=all --renames
        echo
        git log -n 1 HEAD
        echo
        git diff --patch --stat --no-color

        printf "%s\n" "${footer}"

        popd > /dev/null
    else
        echo "ERROR: Failed to pushd to ${type}:${name} [${dir}]"
    fi
}

function handle_scope() {
    local mode=${1}
    shift
    local scope=${1}
    shift

    if [ "${scope}" == "crucible" -o "${scope}" == "all" ]; then
        if pushd $CRUCIBLE_HOME > /dev/null; then
            case "${mode}" in
                info)
                    repo_info "/crucible" $CRUCIBLE_HOME
                    ;;
                details)
                    repo_details "/crucible" ${CRUCIBLE_HOME}
                    ;;
            esac

            popd > /dev/null
        fi

        if [ "${scope}" == "crucible" ]; then
            exit
        fi
    fi

    if [ "${scope}" == "all" ]; then
        if pushd $CRUCIBLE_HOME/subprojects > /dev/null; then
            for tmp_repo in $(find . -type l | sed 'sX./XX'); do
                case "${mode}" in
                    info)
                        repo_info ${tmp_repo}
                        ;;
                    details)
                        repo_details ${tmp_repo}
                        ;;
                esac
            done

            popd > /dev/null
        fi
    else
        if pushd $CRUCIBLE_HOME/subprojects > /dev/null; then
            case "${mode}" in
                info)
                    repo_info ${scope}
                    ;;
                details)
                    repo_details ${scope}
                    ;;
            esac

            popd > /dev/null
        else
            echo "ERROR: repo '${scope}' could not be found!"
            exit 1
        fi
    fi
}

if [ -z "${1}" ]; then
    scope="all"
else
    scope=${1}
    shift
fi

case "${command}" in
    info)
        fmt_line="%-15s  %-13s  %-16s  %-58s  %-17s  %-15s  %-13s  %-14s  %-13s"
        printf "${fmt_line}\n" "Project Name" "Project Type" "Git Local Branch" "Git Remote URL" "Git Remote Branch" "Git Remote Name" "Local Changes" "Current Commit" "Updates"

        handle_scope info ${scope}
        ;;
    details)
        handle_scope details ${scope}
        ;;
esac
