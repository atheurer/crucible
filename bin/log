#!/usr/bin/perl
# -*- mode: perl; indent-tabs-mode: nil; perl-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl

use strict;
use warnings;

use Time::HiRes qw(time);
use DBI;
use Data::Dumper;

# disable output buffering
$|++;

my $mode = $ARGV[0];
my $log_filename = $ARGV[1];

sub help {
    print("Usage:\n");
    print("  log <command>\n");
    print("\n");
    print("The following commands are supported\n");
    print("\n");
    print("help            |  Show this help message\n");
    print("clear           |  Clear the crucible log\n");
    print("info            |  Display information about the log\n");
    print("init            |  Initialize the log\n");
    print("tidy            |  Perform maintenance on the crucible log\n");
    print("view            |  View the crucible log (default)\n");
    print("\n");
}

sub format_ts {
    my $ts = $_[0];

    my @var = localtime(int($ts));
    my $subsec = ($ts - int($ts))*1000;
    my $timestamp = sprintf("%04d-%02d-%02d %02d:%02d:%02d.%03d", $var[5]+1900, $var[4]+1, $var[3], $var[2], $var[1], $var[0], $subsec);

    return($timestamp);
}

if ((!($mode eq "view") &&
     !($mode eq "tidy") &&
     !($mode eq "clear") &&
     !($mode eq "info") &&
     !($mode eq "getsessionids") &&
     !($mode eq "init")) ||
    ($mode eq "help")) {
    help();
    exit();
}

my $do_init = 0;
if (! -e $log_filename) {
    $do_init = 1;
} else {
    if (($mode eq "init") && (! -z $log_filename)) {
        print("Removing existing log and re-initializing\n");
        unlink $log_filename;
    }
}

my $log_dbh = DBI->connect("dbi:SQLite:dbname=" . $log_filename, "", "", { PrintError => 0 });
if (! $log_dbh) {
    printf("ERROR: Logger could not open SQLite DB '%s'!\n", $log_filename);
    exit(1);
}

if (($mode eq "init") || $do_init) {
    my $start_timestamp = time();

    my $rv = $log_dbh->do("CREATE TABLE streams (id INTEGER PRIMARY KEY NOT NULL, stream TEXT UNIQUE NOT NULL);");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("CREATE TABLE sources (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, source TEXT UNIQUE NOT NULL);");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("CREATE TABLE commands (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, command TEXT UNIQUE NOT NULL);");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("CREATE TABLE sessions (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, session_id TEXT UNIQUE NOT NULL, timestamp REAL NOT NULL, source INTEGER NOT NULL REFERENCES sources (id), command INTEGER NOT NULL REFERENCES commands (id));");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("CREATE TABLE lines (id INTEGER PRIMARY KEY AUTOINCREMENT, session INTEGER NOT NULL REFERENCES sessions (id), timestamp REAL NOT NULL, stream INTEGER NOT NULL REFERENCES streams (id), line TEXT);");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("CREATE TABLE db_state (timestamp REAL PRIMARY KEY NOT NULL);");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("INSERT INTO db_state (timestamp) VALUES ($start_timestamp);");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("INSERT INTO streams (id, stream) VALUES (1, 'STDOUT');");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("INSERT INTO streams (id, stream) VALUES (2, 'STDERR');");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }
}

if ($mode eq "view") {
    my $filter_cmd = "";
    if (defined($ARGV[2])) {
        $filter_cmd = $ARGV[2];
    }
    my $filter_query = "";
    if ($filter_cmd eq 'first') {
        if (scalar(@ARGV) > 3) {
            print "ERROR: Too may arguments!\n";
            exit(1);
        }
        $filter_query = "WHERE sessions.timestamp = (SELECT sessions2.timestamp FROM sessions as sessions2 ORDER BY sessions2.timestamp ASC LIMIT 1)";
    } elsif ($filter_cmd eq 'last') {
        if (scalar(@ARGV) > 3) {
            print "ERROR: Too may arguments!\n";
            exit(1);
        }
        $filter_query = "WHERE sessions.timestamp = (SELECT sessions2.timestamp FROM sessions as sessions2 ORDER BY sessions2.timestamp DESC LIMIT 1)";
    } elsif ($filter_cmd eq 'sessionid') {
        if (defined($ARGV[3])) {
            $filter_query = "WHERE sessions.session_id = " . $log_dbh->quote($ARGV[3]);
        } else {
            print "ERROR: Invalid sessionid query!\n";
            exit(1);
        }
    } elsif ($filter_cmd ne "") {
        print "ERROR: Invalid filter command!\n";
        exit(1);
    }

    my $sth = $log_dbh->prepare("SELECT ".
                                "sessions.session_id AS session_id, " .
                                "sessions.timestamp as session_timestamp," .
                                "commands.command AS session_command, " .
                                "sources.source AS session_source, " .
                                "lines.timestamp AS line_timestamp, " .
                                "lines.line AS line, " .
                                "streams.stream AS line_stream " .
                                "FROM sessions " .
                                "JOIN lines ON sessions.id=lines.session " .
                                "JOIN streams ON streams.id=lines.stream " .
                                "JOIN sources ON sources.id=sessions.source " .
                                "JOIN commands ON commands.id=sessions.command " .
                                "$filter_query " .
                                "ORDER BY sessions.timestamp, lines.timestamp;");
    my $rv = $sth->execute() or die $DBI::errstr;
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    my $last_session_timestamp = -1;
    while (my $row = $sth->fetchrow_hashref()) {
        $row->{'session_timestamp_fmt'} = format_ts($row->{'session_timestamp'});
        $row->{'line_timestamp_fmt'} = format_ts($row->{'line_timestamp'});

        if ($last_session_timestamp != $row->{'session_timestamp'}) {
            printf("==============================================================================================\n");
            printf("[%s][%s] session id: %s\n", $row->{'session_timestamp_fmt'}, $row->{'line_stream'}, $row->{'session_id'});
            printf("[%s][%s] command:    %s\n", $row->{'session_timestamp_fmt'}, $row->{'line_stream'}, $row->{'session_command'});
            printf("[%s][%s] source:     %s\n", $row->{'session_timestamp_fmt'}, $row->{'line_stream'}, $row->{'session_source'});
            printf("[%s][%s]\n", $row->{'session_timestamp_fmt'}, $row->{'line_stream'});

            $last_session_timestamp = $row->{'session_timestamp'};
        }

        printf("[%s][%s] %s\n", $row->{'line_timestamp_fmt'}, $row->{'line_stream'}, $row->{'line'});
    }
} elsif ($mode eq "clear") {
    my $rv = $log_dbh->do("DELETE FROM lines");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("DELETE FROM sessions");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("DELETE FROM sources");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("DELETE FROM commands");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $rv = $log_dbh->do("VACUUM");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }
} elsif ($mode eq "tidy") {
    my $rv = $log_dbh->do("VACUUM");
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    } else {
        printf("Crucible log maintenance complete.");
    }
} elsif ($mode eq "info") {
    print("Crucible log information:\n\n");

    my $fmt_line = "%-25s %s\n";

    printf($fmt_line, "Current Log:", $log_filename);

    my @log_size = split(/\s+/, `du -hsc --apparent-size $log_filename`);
    printf($fmt_line, "Log Size:", $log_size[0]);

    my $sth = $log_dbh->prepare("SELECT timestamp FROM sessions ORDER BY timestamp ASC LIMIT 1;");
    my $rv = $sth->execute() or die $DBI::errstr;
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    my $row = $sth->fetchrow_hashref();
    printf($fmt_line, "First session:", format_ts($row->{'timestamp'}));


    $sth = $log_dbh->prepare("SELECT timestamp FROM sessions ORDER BY timestamp DESC LIMIT 1;");
    $rv = $sth->execute() or die $DBI::errstr;
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $row = $sth->fetchrow_hashref();
    printf($fmt_line, "Last session:", format_ts($row->{'timestamp'}));


    $sth = $log_dbh->prepare("SELECT count(timestamp) AS sessions FROM sessions;");
    $rv = $sth->execute() or die $DBI::errstr;
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    $row = $sth->fetchrow_hashref();
    printf($fmt_line, "Total sessions:", $row->{'sessions'});


    print("\n");
} elsif ($mode eq "getsessionids") {
    my $sth = $log_dbh->prepare("SELECT session_id FROM sessions ORDER BY sessions.timestamp;");
    my $rv = $sth->execute() or die $DBI::errstr;
    if ($rv < 0) {
        print $DBI::errstr;
        exit(1);
    }

    while (my $row = $sth->fetchrow_hashref()) {
        printf("%s\n", $row->{'session_id'});
    }
}

$log_dbh->disconnect();
